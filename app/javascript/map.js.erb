// Adds the api key
document.addEventListener("DOMContentLoaded", function() {
  
  (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r, "places", "marker" ].join(","));for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
    key: "<%= Rails.application.credentials.dig(:google_map_api) %>",
    v: "weekly",
    // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
    // Add other bootstrap parameters as needed, using camel case.
  });
  

  geocoding();
  defaultMap();
});


// Initializes map if api is already loaded 
document.addEventListener("turbo:load", () => {
  if (window.location.pathname === "/") {
    if (window.google || google.maps) {
      geocoding();
      defaultMap();
    } 
  }
});


// Initialize and add the map
let map;
let service;

async function defaultMap() {
  
  // Default to minnesota coordinates
  const position = { lat: 46.392410, lng: -94.636230 };
  // Request needed libraries.
  //@ts-ignore
  const { Map } = await google.maps.importLibrary("maps");
  

  // The map, centered on minnesota
  map = new Map(document.getElementById("map"), {
    zoom: 6,
    center: position,
    mapId: "DEFAULT_MAP_ID",
  });
}

// initMap function
async function initMap(latitude, longitude) {
  // The location the User picked
  const position = { lat: latitude, lng: longitude };
  // Request needed libraries.
  //@ts-ignore
  const { Map } = await google.maps.importLibrary("maps");
  const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
  

  // The map, centered at the location the user picked
  map = new Map(document.getElementById("map"), {
    zoom: 10,
    center: position,
    mapId: "USER_MAP_ID",
  });

  var request = {
    location: position,
    radius: '500',
    query: 'lakes'
  };

  service = new google.maps.places.PlacesService(map);
  service.textSearch(request, callback);

}

// Call back function to create markers for each result
function callback(results, status) {
    if (status == google.maps.places.PlacesServiceStatus.OK) {
      for (var i = 0; i < results.length; i++) {
        var place = results[i];
        var marker = createMarker(place);
      }
    }
}

//Creating a marker 
function createMarker(place) {
    const marker = new google.maps.marker.AdvancedMarkerElement({
    map: map,
    position: place.geometry.location,
    title: place.name
  });

  // Add a click event listener to the marker to lead to create/show action
  marker.element.addEventListener("click", async () => {
    const data = await checkIfLakeExists(place.name);

    if (data.exists) {
      window.location.href = `/lakes/${data.id}`
    } else {
      const lakeName = encodeURIComponent(place.name);
      window.location.href = `/lakes/new?name=${lakeName}`
    }
  });

}

async function checkIfLakeExists(lakeName) {
  const response = await fetch(`/lakes/check_existence?name=${encodeURIComponent(lakeName)}`);
  const data = await response.json();
  return (data)
}


async function geocoding(callback) {
  document.getElementById("submit").addEventListener("click", () => {
    var address = $('#user-input').val();
    var encodedAddress = encodeURIComponent(address);
    var api_key = '<%= Rails.application.credentials.dig(:google_map_api) %>'
    var URL = 'https://maps.googleapis.com/maps/api/geocode/json?address=' + encodedAddress + '&key=' + api_key
    
    $.ajax({
      url: URL,
      method: "GET",
      success: function(data){
        var lat = data.results[0].geometry.location.lat
        var lng = data.results[0].geometry.location.lng
        initMap(lat, lng);
      }
    }); 
  });
}